import java.io.*;
import java.util.*;

public class Main {
       public static boolean queenSafe(boolean[][] chess , int r  ,int c){
           for(int i=r-1,j=c;i>=0;i--){
               if(chess[i][j]==true) return false;
           }
           for(int i=r-1,j=c-1;i>=0 && j>=0;i--,j--){
               if(chess[i][j]==true) return false;
           }
          for(int i=r-1,j=c+1;i>=0 && j<chess.length;i--,j++){
               if(chess[i][j]==true) return false;   
       }
       return true;
       }
    
      public static void nqueens(boolean[][] chess , int r,int qpsf,int totalqueens){
           if(r==chess.length){
               if(qpsf==totalqueens){
                   for(int i=0;i<chess.length;i++){
                       for(int j =0;j<chess[0].length;j++){
                           if(chess[i][j]==true){
                               System.out.print("q\t");
                           }
                           else{
                               System.out.print("-\t");
                           }
                       }
                       System.out.println();
                   }
                   System.out.println();
               }
               return;
           }
          for(int c=0;c<chess[0].length;c++){
              if(queenSafe(chess , r ,c)){
                  chess[r][c]=true;
                nqueens(chess , r+1,qpsf+1,totalqueens);
                chess[r][c]=false;
              }
          }
      }
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        boolean[][] chess = new boolean[n][n];
        
        nqueens(chess ,0,0,n);
    }
}
